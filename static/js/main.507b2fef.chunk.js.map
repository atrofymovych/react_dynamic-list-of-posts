{"version":3,"sources":["utils/fetchClient.ts","PostsProvider.tsx","utils/posts.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostContext","React","createContext","error","setError","setIsLoading","isLoading","selectedUser","setSelectedUser","currentPosts","handleOpenPost","selectedPost","currentComments","setCurrentComments","PostProvider","children","useState","setCurrentPosts","setSelectedPost","useEffect","userId","id","postFromServer","catch","finally","Provider","value","post","PostsList","useContext","className","map","title","type","cn","onClick","Loader","NewCommentForm","name","email","newComment","setNewComment","nameError","emailError","bodyError","formError","setFormError","handleInputChange","e","target","onSubmit","preventDefault","postId","addComment","htmlFor","placeholder","onChange","PostDetails","isNewForm","setIsNewForm","commentsFromServer","onDelete","commentId","deleteComment","filter","comment","length","href","handleNewFormClick","UserSelector","users","setUsers","isMenuOpen","setIsMenuOpen","usersFromServer","prevUsers","role","user","handleUserSelection","App","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.507b2fef.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, useEffect } from 'react';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { getPosts } from './utils/posts';\n\ntype Props = {\n  children: React.ReactNode\n};\n\ninterface Context {\n  error: string | null\n  setError: React.Dispatch<React.SetStateAction<string | null>>\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>\n  isLoading: boolean\n  selectedUser: User | null\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>\n  currentPosts: Post[] | null\n  handleOpenPost: (post: Post) => void\n  selectedPost: Post | null\n  currentComments: Comment[]\n  setCurrentComments: React.Dispatch<React.SetStateAction<Comment[]>>\n}\n\nexport const PostContext = React.createContext<Context>({\n  error: null,\n  setError: () => {},\n  setIsLoading: () => {},\n  isLoading: false,\n  selectedUser: null,\n  setSelectedUser: () => {},\n  currentPosts: [],\n  handleOpenPost: () => {},\n  selectedPost: null,\n  currentComments: [],\n  setCurrentComments: () => {},\n});\n\nexport const PostProvider: React.FC<Props> = ({ children }) => {\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [currentPosts, setCurrentPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [currentComments, setCurrentComments]\n  = useState<Comment[]>([]);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n      getPosts(selectedUser.id)\n        .then((postFromServer) => {\n          setCurrentPosts(postFromServer);\n        })\n        .catch(() => {\n          setError('Something went wrong');\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [selectedUser]);\n\n  const handleOpenPost = (post: Post) => {\n    setSelectedPost(post);\n\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <PostContext.Provider\n      value={{\n        error,\n        setError,\n        isLoading,\n        setIsLoading,\n        selectedUser,\n        setSelectedUser,\n        currentPosts,\n        handleOpenPost,\n        selectedPost,\n        currentComments,\n        setCurrentComments,\n      }}\n    >\n      {children}\n    </PostContext.Provider>\n  );\n};\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\nimport { client } from './fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (\n\n  {\n    postId, name, email, body,\n  }: Omit<Comment, 'id'>,\n) => {\n  return client.post<Comment>('/comments/', {\n    postId, name, email, body,\n  });\n};\n","import React, { useContext } from 'react';\nimport cn from 'classnames';\nimport { PostContext } from '../PostsProvider';\n\nexport const PostsList: React.FC = () => {\n  const {\n    currentPosts,\n    handleOpenPost,\n    selectedPost,\n  } = useContext(PostContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {currentPosts?.map(post => {\n            return (\n              <tr data-cy=\"Post\">\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={cn('button is-link',\n                      {\n                        'is-light': !selectedPost\n                        || selectedPost?.id !== post.id,\n                      })}\n                    onClick={() => handleOpenPost(post)}\n                  >\n                    {(selectedPost\n                      && selectedPost.id === post.id)\n                      ? 'Close'\n                      : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useContext } from 'react';\nimport cn from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { addComment } from '../utils/posts';\nimport { PostContext } from '../PostsProvider';\n\nexport const NewCommentForm: React.FC = () => {\n  const {\n    selectedPost,\n    setCurrentComments,\n    currentComments,\n    setError,\n  } = useContext(PostContext);\n\n  const [newComment, setNewComment] = useState<Omit<Comment, 'id' | 'postId'>>({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const [formError, setFormError] = useState({\n    nameError: '',\n    emailError: '',\n    bodyError: '',\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (newComment.name === '') {\n      setFormError({\n        ...formError,\n        nameError: 'Name is required',\n      });\n\n      return;\n    }\n\n    if (newComment.email === '') {\n      setFormError({\n        ...formError,\n        emailError: 'Email is required',\n      });\n\n      return;\n    }\n\n    if (newComment.body === '') {\n      setFormError({\n        ...formError,\n        bodyError: 'Enter some text',\n      });\n\n      return;\n    }\n\n    if (selectedPost) {\n      setIsLoading(true);\n      addComment({\n        name: newComment.name,\n        email: newComment.email,\n        body: newComment.body,\n        postId: selectedPost?.id,\n      })\n        .then((data) => {\n          setCurrentComments([...currentComments, data]);\n        })\n        .catch(() => {\n          setError('Something went wrong');\n        })\n        .finally(() => {\n          setIsLoading(false);\n          setNewComment({\n            name: '',\n            email: '',\n            body: '',\n          });\n        });\n    }\n  };\n\n  const onClear = (e: React.MouseEvent) => {\n    e.preventDefault();\n    setNewComment({\n      ...newComment,\n      body: '',\n    });\n    setFormError({\n      nameError: '',\n      emailError: '',\n      bodyError: '',\n    });\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    setNewComment({\n      ...newComment,\n      [name]: value,\n    });\n  };\n\n  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n    setNewComment({\n      ...newComment,\n      [name]: value,\n    });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': formError.nameError })}\n            value={newComment.name}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formError.nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formError.nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {formError.nameError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': formError.emailError })}\n            value={newComment.email}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formError.emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formError.emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {formError.emailError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea',\n              { 'is-danger': formError.bodyError })}\n            value={newComment.body}\n            onChange={handleTextAreaChange}\n          />\n        </div>\n\n        {formError.bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {formError.bodyError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', { 'is-loading': isLoading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { PostContext } from '../PostsProvider';\nimport { deleteComment, getComments } from '../utils/posts';\nimport { Comment } from '../types/Comment';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    selectedPost,\n    error,\n    setError,\n    currentComments,\n    setCurrentComments,\n  } = useContext(PostContext);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isNewForm, setIsNewForm] = useState(false);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsLoading(true);\n      getComments(selectedPost.id)\n        .then((commentsFromServer) => {\n          setCurrentComments(commentsFromServer);\n        })\n        .catch(() => {\n          setError('Something went wrong');\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [selectedPost, setError, setCurrentComments]);\n\n  const onDelete = (e: React.MouseEvent, commentId: number) => {\n    e.preventDefault();\n    deleteComment(commentId)\n      .then(() => {\n        setCurrentComments(\n          currentComments?.filter(comment => comment.id\n            !== commentId) as Comment[],\n        );\n      });\n  };\n\n  const handleNewFormClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    setIsNewForm(true);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`${selectedPost?.id}#: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <>\n            <div className=\"block\">\n\n              {error && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n              {currentComments?.length === 0 ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              ) : (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n\n                  {currentComments?.map((comment) => (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={comment.id}\n                    >\n                      <div className=\"message-header\">\n                        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={(e) => onDelete(e, comment.id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              )}\n\n              {!isNewForm && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={(e) => handleNewFormClick(e)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </div>\n          </>\n        )}\n\n        {isNewForm && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { getUsers } from '../utils/posts';\nimport { User } from '../types/User';\nimport { PostContext } from '../PostsProvider';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    setError,\n    setSelectedUser,\n    selectedUser,\n  } = useContext(PostContext);\n\n  const [users, setUsers] = useState<User[]>([]);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const handleUserSelection = (user: User) => {\n    setSelectedUser(user);\n    setIsMenuOpen(false);\n  };\n\n  const handleMenuOpen = () => {\n    if (isMenuOpen === true) {\n      setIsMenuOpen(false);\n    } else {\n      setIsMenuOpen(true);\n    }\n  };\n\n  useEffect(() => {\n    setError(null);\n    getUsers()\n      .then((usersFromServer) => {\n        setUsers((prevUsers) => [...prevUsers, ...usersFromServer]);\n      })\n      .catch(() => {\n        setError('Something went wrong');\n      });\n  }, [setError]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleMenuOpen}\n        >\n          {!selectedUser && <span>Choose a user</span>}\n          {selectedUser && <span>{selectedUser.name}</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isMenuOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => {\n              return (\n                <a\n                  key={user.id}\n                  href={`#user-${user.id}`}\n                  onClick={() => handleUserSelection(user)}\n                  className={cn('dropdown-item',\n                    { 'is-active': selectedUser?.id === user.id })}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { PostContext } from './PostsProvider';\n\nexport const App: React.FC = () => {\n  const {\n    selectedUser,\n    error,\n    isLoading,\n    currentPosts,\n    selectedPost,\n  } = useContext(PostContext);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                <p data-cy=\"NoSelectedUser\">\n                  {!selectedUser && 'No user selected'}\n                </p>\n\n                {error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isLoading ? (\n                  <Loader />\n                ) : (\n                  selectedUser && (\n                    <div>\n                      {currentPosts && currentPosts.length === 0 ? (\n                        <div\n                          className=\"notification is-warning\"\n                          data-cy=\"NoPostsYet\"\n                        >\n                          No posts yet\n                        </div>\n                      ) : (\n                        <PostsList />\n                      )}\n                    </div>\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                { 'Sidebar--open': selectedPost },\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { PostProvider } from './PostsProvider';\n\nReactDOM.render(\n  <PostProvider>\n    <App />\n  </PostProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}